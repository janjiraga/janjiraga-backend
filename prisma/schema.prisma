generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(cuid())

    username  String @unique
    email     String @unique
    firstName String
    lastName  String
    phone     String @unique

    password Password?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    events         Event[]
    participations EventParticipant[]
    Participant    Participant[]
}

model Password {
    id String @id @default(cuid())

    hash String

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Event {
    id              String             @id @default(cuid())
    slug            String             @unique
    name            String
    price           Int?
    imageUrl        String?            @db.Text
    description     String?            @db.Text
    maxParticipants Int?
    dateTimeStart   DateTime
    dateTimeEnd     DateTime
    category        Category           @relation(fields: [categoryId], references: [id])
    categoryId      String
    venueId         String
    venue           Venue              @relation(fields: [venueId], references: [id])
    user            User?              @relation(fields: [userId], references: [id])
    userId          String?
    participants    EventParticipant[]
    createdAt       DateTime           @default(now())
    updatedAt       DateTime           @updatedAt
    Participant     Participant[]
}

model Participant {
    id        String             @id @default(cuid())
    user      User               @relation(fields: [userId], references: [id])
    userId    String
    event     Event              @relation(fields: [eventId], references: [id])
    eventId   String
    events    EventParticipant[]
    isPaid    Boolean
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt
}

model EventParticipant {
    id            String      @id @default(cuid())
    event         Event       @relation(fields: [eventId], references: [id])
    eventId       String
    participant   Participant @relation(fields: [participantId], references: [id])
    participantId String
    user          User        @relation(fields: [userId], references: [id])
    userId        String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model Category {
    id      String  @id @default(cuid())
    name    String  @unique
    slug    String  @unique
    iconUrl String  @db.Text
    events  Event[]
}

model Venue {
    id        String  @id @default(cuid())
    slug      String  @unique
    name      String
    address   String
    imageUrl  String? @db.Text
    mapsUrl   String
    latitude  Float
    longitude Float
    zoomLevel Int
    events    Event[]
}
